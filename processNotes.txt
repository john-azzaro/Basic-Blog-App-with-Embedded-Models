Basic Blog App with Embedded Models notes
=========================================




Objective
=========
    In this application study, we'll make a blog application with Crud Operations (Create, Read, Update, and Delete) 
    functionality with mongoose and add additional embedded models functionality to it. I'm going to go step-by-step
    through the process of createing a blog application with the additional features of embedded models for the 
    applications. 
        
    If you would like to see a more in-depth process of the phases before the addition of the embedded 
    models, see Basic-Blog-App here: https://github.com/john-azzaro/Basic-Blog-App . Note thatI'm using this current
    application to repeat and internalize the process for study purposes, so this may be a bit repetitive so please skip
    down to the embedded models section if you are familiar with the orginal basic-blog-app.

    Direct link for Basic-Blog-App process notes: https://github.com/john-azzaro/Basic-Blog-App/blob/master/processNotes.txt.




Process Workflow Summary
========================
    Phase 1: Project Setup
    Phase 2: Create a basic express app
    Phase 3: Setup datbase and server connection
    Phase 4: Add initial middleware



Phase 1: Project Setup
======================
    // Project Setup:
        1. Create project folder (Basic-Blog-App-with-Embedded-Models).                -- create a folder to store your projetc
        2. npm init                                                                    -- create a package.json file to start your project off.
    // Install Express:    
        3. npm install express                                                         -- install express.
    // Add gitignore:
        4. add .gitignore and add node_modules                                         -- omits node_modules from git submission.
    // Install dependencies:
        5. npm install mongoose morgan uuid                                            -- install initial dependencies you'll need for the application.
    // Install Dev dependencies:
        6. npm install --dev-dev nodemon                                               -- install intial dependencies for development.
    // Create server.js file:
        7. server.js                                                                   -- create your server file.   
    // Create custom script for development:
        7. "devStart": "nodemon server.js"                                             -- place this in dev dependencies for quick start of the server with nodemon.




Phase 2: Create a basic express app
===================================
    1. Create express app:
        ----------------------------------------------
            const express = required('express');                              -- Import express.
            const app = express();                                            -- Instantiate express app.
        ----------------------------------------------
    2. Create a basic server:
        --------------------------------------------------------
            let server;                                                       -- Create basic server (this is formatted for testing)
            server = app.listen('3000', function() {                          -- Create server.
                console.log('Server is listening on port 3000...')
            });
        ---------------------------------------------------------
    3. Create a basic GET request to test connection:
        ---------------------------------------------------------
            app.get('/', function(req, res) {                                 -- GET route test (remove after test or modify later).
                res.send('This is a test');
            })
        ---------------------------------------------------------




Phase 3: Setup database and server connection:
=============================================
    0. Create a database or import data you wish to populate your database with:
        * In this case, we're importing author and blogpost data.
        * Note: Each line is submitted seperately.
        * Note: the use of --drop isnt necessary if it is a new database.
        * REMEMBER: mongod should be running in the command line - see here for more 
                    details: https://github.com/john-azzaro/Study-MongoDB-Basics

        ----------------------------------------------------------------------------------------------------------------------------
            mongoimport --db blog-app-with-embedded-models --collection authors --drop --file ~/Desktop/authors-seed-data.json
            mongoimport --db blog-app-with-embedded-models --collection blogposts --drop --file ~/Desktop/blogposts-seed-data.json
        ----------------------------------------------------------------------------------------------------------------------------
        In the mongo shell, see if the database was successfuly created:
        --------------------------
            show dbs
        --------------------------
    1. Import mongoose:
        ------------------------------------------------------
            const mongoose = require('mongose');                          -- Import mongoose.
        ------------------------------------------------------
    2. Configure mongoose to use ES6 promises:
        ------------------------------------------------------
            mongoose.Promise = global.Promise;                            -- Config application to use ES6 promises.
        ------------------------------------------------------
    3. Create config.js file:
        --------------------------------
            config.js
        --------------------------------
    4. Create and export database and port:
        --------------------------------------------------------------------------------------------------------------
            exports.DATABASE_URL = process.env.DATABASE_URL || 'mongodb://localhost/blog-app-with-embedded-models';
            exports.PORT = process.env.PORT || 3000;
        --------------------------------------------------------------------------------------------------------------
    5. Import the DATABASE_URL and PORT to server.js
        ------------------------------------------------------------
            const {DATABASE_URL, PORT} = require('./config.js');
        -------------------------------------------------------------
    6. Add runServer function:
        ------------------------------------------------------------------------------------------------------------
            function runServer(databaseUrl, port=PORT) {                                                                  // To Run server: 
                return new Promise( function(resolve, reject) {                                                           // return Promise in which...
                    mongoose.connect(databaseUrl, { useNewUrlParser: true,  useUnifiedTopology: true }, function() {      // Mongoose connects to database:
                        if (err) {                                                                                        // If there is an error... 
                            return reject(err);                                                                           // ... return reject.
                        }       

                        server = app.listen(port, function() {                                                            // Listen for connection to configured port.  
                            console.log(`Listening on port ${port}...`);                                                  // ... and log connection in terminal.
                            resolve();                                                                                    // and then the promise is resolved!
                        })
                        .on('error', function() {                                                                         // But if there is an error...
                            mongoose.disconnect();                                                                        // ... disconnect from mongoose...
                            reject(err);                                                                                  // and reject (passing in an error object).
                        });
                    });
                });
            }   
        --------------------------------------------------------------------------------------------------------------
    7. Add closeServer function:
        ---------------------------------------------------------------------------------------------------------------
            function closeServer() {                                                                                       // To close server:
                return mongoose.disconnect().then(function() {                                                                  // disconnect and then...
                    return new Promise(function(resolve, reject) {                                                              // return a promise which...
                        console.log("Closing server");                                                                     // ... will log "closing server"...
                        server.close(function(err) {                                                                              // and close the server...
                    if (err) {                                                                                             // and if there is an error, reject...
                    return reject(err);                                  
                    }
                    resolve();                                                                                             // else resolve.
                });
                });
            });
            }
        ---------------------------------------------------------------------------------------------------------------
    8. In case server.js is called directly:
        -------------------------------------------------------------------------------------------
            if (require.main === module) { 
                runServer(DATABASE_URL).catch(function(err) {
                    console.error(err));
                }
            }
        -------------------------------------------------------------------------------------------




Phase 4: Add initial middleware
===============================
    1. Setup server to accept json:
        ----------------------------------------
            app.use(express.json());                      -- load express.
        ----------------------------------------

    2. Install Morgan:
        ----------------------------------------
            const morgan = require('morgan');             -- load morgan.

            app.use(morgan('common'));                    -- use the morgan middleware and specify the report structure.
        ---------------------------------------- 




Phase 5: Create a mongoose and model (including virtuals and instance methods if needed):
=========================================================================================
    1. Create a models file:
        -------------------------------------------
            models.sj
        ------------------------------------------- 
    2. Reference mongoose:
        --------------------------------------------
            const mongoose = require('mongoose');         -- load mongoose in the models file.
        --------------------------------------------
    3. Configure models.js to use ES6 promises:
        --------------------------------------------
            mongoose.Promise = global.Promise;                -- ensure you can use ES6 promises.
        --------------------------------------------
    4. Add schemas:
        -------------------------------------------------------------------------------------------------------
            // author schema
            let authorSchema = mongoose.Schema({
                firstName: 'string',
                lastName: 'string',
                userName: {
                type: 'string',
                unique: true
                }
            });


            // blogpost schema
            let blogPostSchema = mongoose.Schema({
                title: 'string',
                content: 'string',
                author: { type: mongoose.Schema.Types.ObjectId, ref: 'Author' },
                comments: [commentSchema]
            });

            blogPostSchema.pre('find', function(next) {
                this.populate('author');
                next();
            });
            
            blogPostSchema.pre('findOne', function(next) {
                this.populate('author');
                next();
            });

            blogPostSchema.virtual('authorName').get(function() {
                return `${this.author.firstName} ${this.author.lastName}`.trim();
            });

            blogPostSchema.methods.serialize = function() {
                return {
                id: this._id,
                author: this.authorName,
                content: this.content,
                title: this.title,
                comments: this.comments
                };
            };


            // models
            const Author = mongoose.model('Author', authorSchema);
            const BlogPost = mongoose.model('BlogPost', blogPostSchema);

            module.exports = {Author, BlogPost};
        -------------------------------------------------------------------------------------------------------




Phase 6: Add routes for Authors:
================================
    -------------------------------------------------------------------------------------------------- 
        app.get('/authors', (req, res) => {
            Author
                .find()
                .then(authors => {
                res.json(authors.map(author => {
                    return {
                    id: author._id,
                    name: `${author.firstName} ${author.lastName}`,
                    userName: author.userName
                    };
                }));
                })
                .catch(err => {
                console.error(err);
                res.status(500).json({ error: 'something went terribly wrong' });
                });
        });

        app.post('/authors', (req, res) => {
            const requiredFields = ['firstName', 'lastName', 'userName'];
            requiredFields.forEach(field => {
                if (!(field in req.body)) {
                const message = `Missing \`${field}\` in request body`;
                console.error(message);
                return res.status(400).send(message);
                }
            });

            Author
                .findOne({ userName: req.body.userName })
                .then(author => {
                if (author) {
                    const message = `Username already taken`;
                    console.error(message);
                    return res.status(400).send(message);
                }
                else {
                    Author
                    .create({
                        firstName: req.body.firstName,
                        lastName: req.body.lastName,
                        userName: req.body.userName
                    })
                    .then(author => res.status(201).json({
                        _id: author.id,
                        name: `${author.firstName} ${author.lastName}`,
                        userName: author.userName
                        }))
                    .catch(err => {
                        console.error(err);
                        res.status(500).json({ error: 'Something went wrong' });
                    });
                }
                })
                .catch(err => {
                console.error(err);
                res.status(500).json({ error: 'something went horribly awry' });
                });
        });
    --------------------------------------------------------------------------------------------------
    